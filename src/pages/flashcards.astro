---
import Layout from '../layouts/Layout.astro';
import cards from '../data/flashcards.json';
---
<Layout title="Flashcards">
  <style>
    :root {
      --card-w: min(720px, 92vw);
      --card-h: clamp(220px, 40vh, 360px);
      --radius: 12px;
      --card-shadow: 0 8px 20px rgba(0,0,0,.06);
      --focus: hsl(212 90% 56%);
    }

    /* Use site-wide variables for colors and font so the page matches Layout.astro */
    main.deck { min-height: 70vh; display:grid; place-items:center; padding: clamp(16px,3vw,48px); gap:18px }

    .stack { display: grid; gap: 18px; width: var(--card-w); }

    .card { width: 100%; height: var(--card-h); perspective: 1000px; position: relative; }

    .card__btn { position:absolute; inset:0; width:100%; height:100%; padding:0; border:0; background:transparent; cursor:pointer; transform-style:preserve-3d; transition: transform .6s cubic-bezier(.2,.6,.2,1); border-radius:var(--radius); box-shadow:var(--card-shadow); }
    .card__btn:focus-visible { outline: 3px solid var(--focus); outline-offset: 4px; }
    .card__btn[aria-expanded="true"] { transform: rotateY(180deg); }

    .card__face { position:absolute; inset:0; display:grid; grid-template-rows:auto 1fr auto; align-items:start; gap:.5rem; padding:1.25rem 1.5rem; border-radius:var(--radius); backface-visibility:hidden; background:var(--background-color); color:var(--text-color); }

    .card__face--back { transform: rotateY(180deg); background: color-mix(in srgb, var(--background-color) 92%, black 6%); }

    .card__eyebrow { font-size:.8rem; text-transform:uppercase; letter-spacing:.08em; opacity:.7 }
    .card__content { font-size: clamp(1.05rem, 1rem + .5vw, 1.25rem); align-self:center }
    .card__hint { font-size:.9rem; opacity:.7 }

    .controls { display:flex; gap:12px; justify-content:center; align-items:center; width:100% }
    .controls button { background:transparent; border:1px solid color-mix(in srgb, var(--text-color) 12%, transparent 88%); color:var(--text-color); padding:.45rem .8rem; border-radius:8px; cursor:pointer }

    @media (prefers-reduced-motion: reduce) { .card__btn { transition: none } }
  </style>

  <main class="deck">
    <h1>Flashcards</h1>

    <section class="stack" aria-label="Flashcard viewer">
      <article class="card" aria-labelledby="q-current">
        <button id="cardBtn" class="card__btn" type="button" aria-expanded="false" aria-controls="a-current">
          <div class="card__face card__face--front">
            <span class="card__eyebrow" id="eyebrow">Question</span>
            <div style="display:flex;gap:12px;align-items:center;">
              <img id="cardImage" src="" alt="" loading="lazy" decoding="async" width="120" height="120" style="max-width:120px;max-height:120px;width:120px;height:120px;border-radius:8px;display:none;object-fit:cover;" />
              <div class="card__content" id="q-current">{cards[0].q}</div>
            </div>
            <div class="card__hint">Click to reveal the answer</div>
          </div>

          <div class="card__face card__face--back" id="a-current" role="region" aria-label="Answer">
            <span class="card__eyebrow">Answer</span>
            <div class="card__content" id="a-current-content">{cards[0].a}</div>
            <div class="card__hint">Click to flip back</div>
          </div>
        </button>
      </article>

      <div class="controls">
        <button id="prevBtn" aria-label="Previous card">← Prev</button>
        <div id="progress" style="opacity:.85">1 / {cards.length}</div>
        <button id="nextBtn" aria-label="Next card">Next →</button>
      </div>
    </section>

    <p style="opacity:.75;max-width:var(--card-w);text-align:center">Tip: Click the card, press <kbd>Space</kbd> or <kbd>Enter</kbd> to flip. Use <kbd>←</kbd>/<kbd>→</kbd> to move between cards.</p>
  </main>

  <!-- serialized data for client -->
  <script id="flashcards-data" type="application/json">{JSON.stringify(cards)}</script>

  <script>
    // Parse the serialized cards data from the DOM to avoid build-time parsing issues
    const cards = JSON.parse(document.getElementById('flashcards-data').textContent || '[]');
    let idx = 0;

  const btn = document.getElementById('cardBtn');
  const qEl = document.getElementById('q-current');
  const aEl = document.getElementById('a-current-content');
  const eyebrow = document.getElementById('eyebrow');
  const progress = document.getElementById('progress');
  const prev = document.getElementById('prevBtn');
  const next = document.getElementById('nextBtn');
  const cardImage = document.getElementById('cardImage');

    function render() {
      const c = cards[idx];
      qEl.textContent = c.q;
      aEl.textContent = c.a;
      eyebrow.textContent = `Question ${idx + 1}`;
      progress.textContent = `${idx + 1} / ${cards.length}`;
      btn.setAttribute('aria-expanded', 'false');
      // image handling
      if (c.img) {
        // Prefer https to avoid mixed-content blocking in browsers
        let imgUrl = c.img;
        if (imgUrl.startsWith('http://')) imgUrl = imgUrl.replace(/^http:\/\//, 'https://');
        cardImage.src = imgUrl;
        cardImage.alt = c.q;
        cardImage.style.display = '';
      } else {
        cardImage.src = '';
        cardImage.alt = '';
        cardImage.style.display = 'none';
      }
    }

    btn.addEventListener('click', () => {
      const open = btn.getAttribute('aria-expanded') === 'true';
      btn.setAttribute('aria-expanded', String(!open));
    });

    document.addEventListener('keydown', (e) => {
      if (e.key === 'ArrowRight') { idx = (idx + 1) % cards.length; render(); btn.focus(); return }
      if (e.key === 'ArrowLeft') { idx = (idx - 1 + cards.length) % cards.length; render(); btn.focus(); return }
      if ((e.key === ' ' || e.key === 'Spacebar' || e.key === 'Enter') && document.activeElement === btn) { e.preventDefault(); const open = btn.getAttribute('aria-expanded') === 'true'; btn.setAttribute('aria-expanded', String(!open)); }
    });

    prev.addEventListener('click', () => { idx = (idx - 1 + cards.length) % cards.length; render(); btn.focus() });
    next.addEventListener('click', () => { idx = (idx + 1) % cards.length; render(); btn.focus() });

    render();
  </script>
</Layout>
