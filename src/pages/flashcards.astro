---
import Layout from '../layouts/Layout.astro';
/** Replace this data with your own, or import it from /src/data/flashcards.json */
const cards = [
  { q: "What does CSS stand for?", a: "Cascading Style Sheets." },
  { q: "What is the capital of Japan?", a: "Tokyo." },
  { q: "2 × 7 = ?", a: "14." },
];
---

<Layout title="Flashcards">
  <style>
      :root {
        --card-w: min(720px, 92vw);
        --card-h: clamp(200px, 40vh, 320px);
        --radius: 16px;
        --shadow: 0 12px 24px rgba(0,0,0,.12), 0 4px 8px rgba(0,0,0,.08);
        --front-bg: #ffffff;
        --front-fg: #111111;
        --back-bg: #111111;
        --back-fg: #ffffff;
        --focus: hsl(212 90% 56%);
      }
      @media (prefers-color-scheme: dark) {
        :root {
          --front-bg: #1b1b1b;
          --front-fg: #f5f5f5;
          --back-bg: #0f0f0f;
          --back-fg: #ffffff;
        }
      }

      body {
        margin: 0;
        font: 16px/1.5 system-ui, -apple-system, Segoe UI, Roboto, "Helvetica Neue", Arial, "Noto Sans", "Apple Color Emoji", "Segoe UI Emoji";
        color: var(--front-fg);
        background: color-mix(in srgb, var(--front-bg) 96%, black 4%);
      }

      main.deck {
        min-height: 100dvh;
        display: grid;
        place-items: center;
        padding: clamp(16px, 3vw, 48px);
        gap: 18px;
      }

        display: grid;
        gap: 18px;
        width: var(--card-w);
      }

      /* each card container provides the 3D perspective */
      .card {
        width: 100%;
        height: var(--card-h);
        perspective: 1000px;
        position: relative;
      }

      /* the button is the flippable element */
      .card__btn {
        position: absolute;
        inset: 0;
        width: 100%;
        height: 100%;
        padding: 0;
        border: 0;
        background: transparent;
        cursor: pointer;
        transform-style: preserve-3d;
        transition: transform .7s cubic-bezier(.2,.6,.2,1);
        border-radius: var(--radius);
        box-shadow: var(--shadow);
      }
      .card__btn:focus-visible {
        outline: 3px solid var(--focus);
        outline-offset: 4px;
      }
      .card__btn[aria-expanded="true"] {
        transform: rotateY(180deg);
      }

      .card__face {
        position: absolute;
        inset: 0;
        display: grid;
        grid-template-rows: auto 1fr auto;
        align-items: start;
        gap: .5rem;
        padding: 1.25rem 1.5rem;
        border-radius: var(--radius);
        backface-visibility: hidden;
      }

      .card__face--front {
        background: var(--front-bg);
        color: var(--front-fg);
      }

      .card__face--back {
        background: var(--back-bg);
        color: var(--back-fg);
        transform: rotateY(180deg);
      }

      .card__eyebrow {
        font-size: .8rem;
        text-transform: uppercase;
        letter-spacing: .08em;
        opacity: .7;
      }

      .card__content {
        font-size: clamp(1.05rem, 1rem + .5vw, 1.35rem);
      }

      .card__hint {
        font-size: .9rem;
        opacity: .7;
      }

      /* subtle imperfect stack vibe */
      .card:nth-child(odd) { rotate: -.25deg; }
      .card:nth-child(even) { rotate: .15deg; }

    @media (prefers-reduced-motion: reduce) {
      .card__btn { transition: none; }
    }
  </style>

  <main class="deck">
    <h1>Flashcards</h1>

    <section class="stack" aria-label="Flashcard viewer">
      <!-- Single card container -->
      <article class="card" aria-labelledby="q-current">
        <button
          id="cardBtn"
          class="card__btn"
          type="button"
          aria-expanded="false"
          aria-controls="a-current"
        >
          <div class="card__face card__face--front">
            <span class="card__eyebrow" id="eyebrow">Question</span>
            <div class="card__content" id="q-current">{cards[0].q}</div>
            <div class="card__hint">Click to reveal the answer</div>
          </div>

          <div class="card__face card__face--back" id="a-current" role="region" aria-label="Answer">
            <span class="card__eyebrow">Answer</span>
            <div class="card__content" id="a-current-content">{cards[0].a}</div>
            <div class="card__hint">Click to flip back</div>
          </div>
        </button>
      </article>

      <div style="display:flex;gap:12px;justify-content:center;align-items:center;width:100%;">
        <button id="prevBtn" aria-label="Previous card">← Prev</button>
        <div id="progress" style="opacity:.85">1 / {cards.length}</div>
        <button id="nextBtn" aria-label="Next card">Next →</button>
      </div>
    </section>

    <p style="opacity:.75;max-width:var(--card-w);text-align:center">
      Tip: Click the card, press <kbd>Space</kbd> or <kbd>Enter</kbd> to flip. Use <kbd>←</kbd>/<kbd>→</kbd> to move between cards.
    </p>
  </main>

  <script>
    // Inject server-side data safely into client script
    const cards = JSON.parse(decodeURIComponent("%5B%7B%22q%22%3A%22What%20does%20CSS%20stand%20for%3F%22%2C%22a%22%3A%22Cascading%20Style%20Sheets.%22%7D%2C%7B%22q%22%3A%22What%20is%20the%20capital%20of%20Japan%3F%22%2C%22a%22%3A%22Tokyo.%22%7D%2C%7B%22q%22%3A%222%20%C3%97%207%20%3D%20%3F%22%2C%22a%22%3A%2214.%22%7D%5D"));
    let idx = 0;

    const btn = document.getElementById('cardBtn');
    const qEl = document.getElementById('q-current');
    const aEl = document.getElementById('a-current-content');
    const eyebrow = document.getElementById('eyebrow');
    const progress = document.getElementById('progress');
    const prev = document.getElementById('prevBtn');
    const next = document.getElementById('nextBtn');

    function render() {
      const c = cards[idx];
      qEl.textContent = c.q;
      aEl.textContent = c.a;
      eyebrow.textContent = `Question ${idx + 1}`;
      progress.textContent = `${idx + 1} / ${cards.length}`;
      // Ensure card is showing front when navigating
      btn.setAttribute('aria-expanded', 'false');
    }

    btn.addEventListener('click', () => {
      const open = btn.getAttribute('aria-expanded') === 'true';
      btn.setAttribute('aria-expanded', String(!open));
    });

    // keyboard interaction
    document.addEventListener('keydown', (e) => {
      if (e.key === 'ArrowRight') {
        idx = (idx + 1) % cards.length;
        render();
        btn.focus();
        return;
      }
      if (e.key === 'ArrowLeft') {
        idx = (idx - 1 + cards.length) % cards.length;
        render();
        btn.focus();
        return;
      }
      // Space or Enter flips the card when the button is focused
      if ((e.key === ' ' || e.key === 'Spacebar' || e.key === 'Enter') && document.activeElement === btn) {
        e.preventDefault();
        const open = btn.getAttribute('aria-expanded') === 'true';
        btn.setAttribute('aria-expanded', String(!open));
      }
    });

    prev.addEventListener('click', () => {
      idx = (idx - 1 + cards.length) % cards.length;
      render();
      btn.focus();
    });
    next.addEventListener('click', () => {
      idx = (idx + 1) % cards.length;
      render();
      btn.focus();
    });

    // initial render
    render();
  </script>
</Layout>
