---
import Layout from '../layouts/Layout.astro';
import { getCollection } from 'astro:content';

// Get all published books from the content collection
const books = await getCollection('books', ({ data }) => {
  return data.isPublished;
});

// Sort books by created date, most recent first
const sortedBooks = books.sort((a, b) => 
  new Date(b.data.created || '').getTime() - new Date(a.data.created || '').getTime()
);

// Function to get status badge color
function getStatusColor(status: string | undefined) {
  switch(status?.toLowerCase()) {
    case 'complete': return 'bg-green-100 text-green-800';
    case 'reading': return 'bg-blue-100 text-blue-800';
    case 'to read': return 'bg-gray-100 text-gray-800';
    default: return 'bg-gray-100 text-gray-800';
  }
}
---

<Layout title="Book Notes - Shrink">
  <div class="books-container">
    <header class="page-header">
      <h1>Book Notes</h1>
      <p class="intro">
        A collection of books I've read, am reading, or plan to read.
      </p>
    </header>

    <div class="search-section">
      <input 
        type="text" 
        id="searchInput" 
        placeholder="Search books by title, author, or tag..."
        class="search-input"
      />
      <div class="tag-filters">
        <!-- Tags will be dynamically populated -->
      </div>
    </div>

    <div class="books-grid" id="booksGrid">
      {sortedBooks.map((book) => (
        <article class="book-card">
          <a href={`/books/${book.slug}`} class="book-cover-link">
            <div class="book-cover">
              <img src={book.data.cover} alt={`Cover of ${book.data.title}`} />
            </div>
          </a>
          <div class="book-content">
            <a href={`/books/${book.slug}`} class="book-title-link">
              <h2>{book.data.title}</h2>
              {book.data.subtitle && (
                <p class="subtitle">{book.data.subtitle}</p>
              )}
            </a>
            <div class="book-meta">
              <span class="author">{book.data.author.join(', ')}</span>
              <div class="flex items-center gap-2">
                <span class={`status-badge ${getStatusColor(book.data.status)}`}>
                  {book.data.status || 'To Read'}
                </span>
                {book.data.pages && (
                  <span class="text-sm text-gray-500">
                    {book.data.pages} pages
                  </span>
                )}
              </div>
            </div>
            {book.data.category && (
              <div class="categories">
                {book.data.category.map((cat) => (
                  <span class="category">{cat}</span>
                ))}
              </div>
            )}
            <div class="book-tags">
              {book.data.tags.filter(tag => tag !== 'ðŸ“šBook').map((tag) => (
                <span class="tag">{tag}</span>
              ))}
            </div>
          </div>
        </article>
      ))}
    </div>
  </div>
</Layout>

<style>
  .books-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem 1rem;
  }

  .page-header {
    text-align: center;
    margin-bottom: 3rem;
  }

  h1 {
    font-size: 2.5rem;
    margin-bottom: 1rem;
  }

  .intro {
    font-size: 1.2rem;
    color: #555;
    max-width: 600px;
    margin: 0 auto;
  }

  .search-section {
    margin-bottom: 3rem;
  }

  .search-input {
    width: 100%;
    max-width: 600px;
    margin: 0 auto 1rem;
    display: block;
    padding: 0.8rem 1rem;
    border: 2px solid #eee;
    border-radius: 8px;
    font-size: 1rem;
  }

  .books-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 2.5rem;
    padding: 1rem;
  }

  .book-card {
    display: flex;
    flex-direction: column;
    border: none;
    background: transparent;
    transition: transform 0.2s;
  }

  .book-card:hover {
    transform: translateY(-4px);
  }

  .book-cover {
    margin-bottom: 1rem;
    position: relative;
    aspect-ratio: 2/3;
  }

  .book-cover img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 4px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    border: 1px solid #e5e5e5;
  }

  .book-content {
    flex: 1;
  }

  .book-content h2 {
    font-size: 1.2rem;
    margin: 0 0 0.5rem 0;
    color: var(--text-color);
  }

  .subtitle {
    font-size: 0.9rem;
    color: #666;
    margin-top: 0.25rem;
  }

  .book-meta {
    font-size: 0.9rem;
    color: #666;
    margin-bottom: 0.5rem;
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }

  .status-badge {
    display: inline-block;
    padding: 0.25rem 0.75rem;
    border-radius: 9999px;
    font-size: 0.75rem;
    font-weight: 500;
  }

  .rating {
    color: #ffd700;
    letter-spacing: 1px;
  }

  .summary {
    font-size: 0.95rem;
    color: #555;
    margin: 0.5rem 0;
    line-height: 1.5;
  }

  .categories {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin: 0.5rem 0;
  }

  .category {
    font-size: 0.85rem;
    color: #666;
    background: #f5f5f5;
    padding: 0.2rem 0.6rem;
    border-radius: 4px;
  }

  .book-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-top: 0.5rem;
  }

  .tag {
    background: #f0f0f0;
    padding: 0.2rem 0.6rem;
    border-radius: 20px;
    font-size: 0.8rem;
    color: #666;
  }

  .read-more {
    display: inline-block;
    margin-top: 1rem;
    color: var(--link-color);
    font-size: 0.9rem;
    text-decoration: none;
  }

  .read-more:hover {
    text-decoration: underline;
  }

  .book-cover-link {
    display: block;
    text-decoration: none;
    color: inherit;
  }

  .book-title-link {
    text-decoration: none;
    color: inherit;
  }

  .book-title-link:hover h2 {
    color: var(--link-color);
  }
</style>

<script>
  // Client-side search functionality
  const searchInput = document.getElementById('searchInput');
  const booksGrid = document.getElementById('booksGrid');
  
  if (searchInput && booksGrid) {
    searchInput.addEventListener('input', (e) => {
      const searchTerm = e.target.value.toLowerCase();
      const bookCards = booksGrid.querySelectorAll('.book-card');
      
      bookCards.forEach(card => {
        const text = card.textContent.toLowerCase();
        card.style.display = text.includes(searchTerm) ? 'block' : 'none';
      });
    });
  }
</script>