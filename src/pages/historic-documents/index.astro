---
import Layout from '../../layouts/Layout.astro';
import { getCollection } from 'astro:content';

const documents = await getCollection('documents', ({ data }) => data.isPublished !== false);

// Sort by date (desc) if present, otherwise by title
const sortedDocs = documents.sort((a, b) => {
  const ad = a.data.date ? new Date(a.data.date).getTime() : 0;
  const bd = b.data.date ? new Date(b.data.date).getTime() : 0;
  if (bd !== ad) return bd - ad;
  return a.data.title.localeCompare(b.data.title);
});
---

<Layout title="Historic Documents - Shrink" description="Primary sources and historical documents">
  <div class="container">
    <header class="page-header">
      <h1>Historic Documents</h1>
      <p class="intro">
        A curated collection of primary sources and historical documents.
      </p>
    </header>

    {sortedDocs.length === 0 ? (
      <p>No documents yet. Check back soon.</p>
    ) : (
      <div class="grid">
        {sortedDocs.map((doc) => (
          <article class="card">
            <a href={`/historic-documents/${doc.slug}`} class="cover-link">
              <div class="cover">
                {doc.data.cover ? (
                  <img src={doc.data.cover} alt={`Cover of ${doc.data.title}`} />
                ) : (
                  <div class="placeholder" aria-hidden="true" />
                )}
              </div>
            </a>
            <div class="content">
              <a href={`/historic-documents/${doc.slug}`} class="title-link">
                <h2>{doc.data.title}</h2>
                {doc.data.subtitle && <p class="subtitle">{doc.data.subtitle}</p>}
              </a>
              <div class="meta">
                {doc.data.authors && doc.data.authors.length > 0 && (
                  <span class="author">{doc.data.authors.join(', ')}</span>
                )}
                {doc.data.origin && <span class="origin">{doc.data.origin}</span>}
                {doc.data.date && (
                  <span class="date">
                    {new Date(doc.data.date).toLocaleDateString('en-US', { year: 'numeric', month: 'long' })}
                  </span>
                )}
              </div>
              {doc.data.tags && doc.data.tags.length > 0 && (
                <div class="tags">
                  {doc.data.tags.map((tag) => (
                    <span class="tag">{tag}</span>
                  ))}
                </div>
              )}
            </div>
          </article>
        ))}
      </div>
    )}
  </div>
</Layout>

<style>
  .container { max-width: 1200px; margin: 0 auto; padding: 2rem 1rem; }
  .page-header { text-align: center; margin-bottom: 2rem; }
  h1 { font-size: 2.25rem; margin: 0 0 0.5rem; }
  .intro { color: #555; font-size: 1.1rem; }
  .grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(260px, 1fr)); gap: 2rem; }
  .card { display: flex; flex-direction: column; }
  .cover { aspect-ratio: 3 / 4; background: #f4f4f4; border-radius: 6px; overflow: hidden; border: 1px solid #e5e5e5; }
  .cover img { width: 100%; height: 100%; object-fit: cover; display: block; }
  .placeholder { width: 100%; height: 100%; background: linear-gradient(135deg, #f0f0f0, #e6e6e6); }
  .content { margin-top: 0.75rem; }
  .title-link { color: inherit; text-decoration: none; }
  .title-link:hover h2 { color: var(--link-color); }
  h2 { font-size: 1.1rem; margin: 0; }
  .subtitle { color: #666; margin: 0.25rem 0 0; font-size: 0.95rem; }
  .meta { display: flex; flex-wrap: wrap; gap: 0.5rem 1rem; margin-top: 0.5rem; color: #666; font-size: 0.9rem; }
  .tags { display: flex; flex-wrap: wrap; gap: 0.5rem; margin-top: 0.75rem; }
  .tag { background: #f0f0f0; padding: 0.2rem 0.6rem; border-radius: 9999px; font-size: 0.8rem; color: #555; }
  .cover-link { display: block; }
</style>
