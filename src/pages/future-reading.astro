---
import Layout from '../layouts/Layout.astro';

// This will be replaced with real book data later
const futureReads = [
  {
    title: "Example Book 1",
    author: "Author Name",
    priority: "High",
    reason: "Recommended by several trusted sources, covers topics I'm currently exploring",
    coverImage: "https://placehold.co/200x300",
    tags: ["Business", "Psychology"]
  },
  {
    title: "Example Book 2",
    author: "Another Author",
    priority: "Medium",
    reason: "Interesting perspective on [topic], want to explore further",
    coverImage: "https://placehold.co/200x300",
    tags: ["Philosophy", "Personal Growth"]
  }
];
---

<Layout title="Future Reading - Shrink">
  <div class="reading-container">
    <header class="page-header">
      <h1>Future Reading</h1>
      <p class="intro">
        My reading wishlist â€” books I'm excited to explore next. Each entry includes why I want to read it and its current priority in my queue.
      </p>
    </header>

    <div class="search-section">
      <input 
        type="text" 
        id="searchInput" 
        placeholder="Search by title, author, or tag..."
        class="search-input"
      />
      <div class="priority-filters">
        <button class="filter-btn" data-priority="High">High Priority</button>
        <button class="filter-btn" data-priority="Medium">Medium Priority</button>
        <button class="filter-btn" data-priority="Low">Low Priority</button>
      </div>
    </div>

    <div class="reading-grid" id="readingGrid">
      {futureReads.map((book) => (
        <article class="book-card">
          <div class="book-cover">
            <img src={book.coverImage} alt={`Cover of ${book.title}`} />
            <div class={`priority-badge ${book.priority.toLowerCase()}`}>
              {book.priority}
            </div>
          </div>
          <div class="book-content">
            <h2>{book.title}</h2>
            <div class="book-meta">
              <span class="author">{book.author}</span>
            </div>
            <p class="reason">{book.reason}</p>
            <div class="book-tags">
              {book.tags.map((tag) => (
                <span class="tag">{tag}</span>
              ))}
            </div>
          </div>
        </article>
      ))}
    </div>
  </div>
</Layout>

<style>
  .reading-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem 1rem;
  }

  .page-header {
    text-align: center;
    margin-bottom: 3rem;
  }

  h1 {
    font-size: 2.5rem;
    margin-bottom: 1rem;
  }

  .intro {
    font-size: 1.2rem;
    color: #555;
    max-width: 600px;
    margin: 0 auto;
  }

  .search-section {
    margin-bottom: 3rem;
    text-align: center;
  }

  .search-input {
    width: 100%;
    max-width: 600px;
    margin: 0 auto 1rem;
    display: block;
    padding: 0.8rem 1rem;
    border: 2px solid #eee;
    border-radius: 8px;
    font-size: 1rem;
  }

  .priority-filters {
    display: flex;
    gap: 1rem;
    justify-content: center;
    margin-top: 1rem;
  }

  .filter-btn {
    padding: 0.5rem 1rem;
    border: 1px solid #eee;
    border-radius: 20px;
    background: white;
    cursor: pointer;
    transition: all 0.2s;
  }

  .filter-btn:hover {
    background: #f5f5f5;
  }

  .filter-btn.active {
    background: var(--link-color);
    color: white;
    border-color: var(--link-color);
  }

  .reading-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 2.5rem;
    padding: 1rem;
  }

  .book-card {
    display: flex;
    flex-direction: column;
    border: none;
    background: transparent;
    transition: transform 0.2s;
  }

  .book-card:hover {
    transform: translateY(-4px);
  }

  .book-cover {
    margin-bottom: 1rem;
    position: relative;
    aspect-ratio: 2/3;
  }

  .book-cover img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 4px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }

  .priority-badge {
    position: absolute;
    top: 10px;
    right: 10px;
    padding: 0.3rem 0.8rem;
    border-radius: 15px;
    font-size: 0.8rem;
    font-weight: 600;
    color: white;
  }

  .priority-badge.high {
    background: #e53e3e;
  }

  .priority-badge.medium {
    background: #dd6b20;
  }

  .priority-badge.low {
    background: #718096;
  }

  .book-content {
    flex: 1;
  }

  .book-content h2 {
    font-size: 1.2rem;
    margin: 0 0 0.5rem 0;
    color: var(--text-color);
  }

  .book-meta {
    font-size: 0.9rem;
    color: #666;
    margin-bottom: 0.5rem;
  }

  .reason {
    font-size: 0.95rem;
    color: #555;
    margin: 0.5rem 0;
    line-height: 1.5;
  }

  .book-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-top: 0.5rem;
  }

  .tag {
    background: #f0f0f0;
    padding: 0.2rem 0.6rem;
    border-radius: 20px;
    font-size: 0.8rem;
    color: #666;
  }
</style>

<script>
  // Client-side search and filter functionality
  const searchInput = document.getElementById('searchInput');
  const readingGrid = document.getElementById('readingGrid');
  const filterBtns = document.querySelectorAll('.filter-btn');
  
  let activeFilter = '';

  if (searchInput && readingGrid) {
    searchInput.addEventListener('input', filterBooks);
  }

  filterBtns.forEach(btn => {
    btn.addEventListener('click', () => {
      const priority = btn.dataset.priority;
      
      // Toggle active state
      if (activeFilter === priority) {
        activeFilter = '';
        btn.classList.remove('active');
      } else {
        filterBtns.forEach(b => b.classList.remove('active'));
        btn.classList.add('active');
        activeFilter = priority;
      }
      
      filterBooks();
    });
  });

  function filterBooks() {
    const searchTerm = searchInput.value.toLowerCase();
    const bookCards = readingGrid.querySelectorAll('.book-card');
    
    bookCards.forEach(card => {
      const text = card.textContent.toLowerCase();
      const priorityMatch = !activeFilter || card.querySelector(`.priority-badge.${activeFilter.toLowerCase()}`);
      const searchMatch = text.includes(searchTerm);
      
      card.style.display = (priorityMatch && searchMatch) ? 'block' : 'none';
    });
  }
</script>