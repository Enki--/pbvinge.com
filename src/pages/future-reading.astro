---
import Layout from '../layouts/Layout.astro';
import { getCollection } from 'astro:content';

// Get all books from the content collection
const allBooks = await getCollection('books', ({ data }) => {
  return data.isPublished;
});

// Convert to the format expected by the template
const futureReads = allBooks.map(book => ({
  title: book.data.title,
  author: book.data.author,
  class: book.data.class || '',
  dateCompleted: book.data.status || 'TBR',
  coverImage: book.data.cover,
  tags: book.data.tags || [],
  slug: book.slug
}));
---

<Layout title="Future Reading - Shrink">
  <div class="w-full flex justify-center">
    <div class="w-full px-2 sm:px-4 lg:px-8 py-8">
      <header class="text-center mb-8">
        <h1 class="text-4xl font-bold mb-4">Future Reading</h1>
        <p class="text-lg text-gray-600 max-w-2xl mx-auto">
          Books I plan to read, organized by subject area.
        </p>
      </header>

      <div class="mb-6">
        <input 
          type="text" 
          id="filterInput" 
          placeholder="Filter books..."
          class="w-full max-w-md mx-auto block px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
        />
      </div>

      <div class="mb-4 flex flex-wrap gap-4 items-center">
        <label for="classFilter" class="font-medium">Filter by Class:</label>
        <select id="classFilter" class="border rounded px-2 py-1">
          <option value="">All</option>
          {Array.from(new Set(futureReads.map(book => book.class))).map(cls => (
            <option value={cls}>{cls}</option>
          ))}
        </select>
        <label for="statusFilter" class="font-medium ml-4">Filter by Status:</label>
        <select id="statusFilter" class="border rounded px-2 py-1">
          <option value="">All</option>
          {Array.from(new Set(futureReads.map(book => book.dateCompleted))).map(status => (
            <option value={status}>{status}</option>
          ))}
        </select>
      </div>

      <!-- Desktop Table -->
      <div class="hidden md:block w-full">
        <table class="w-full max-w-screen-lg mx-auto divide-y divide-gray-300 text-base">
          <thead class="bg-gray-50">
            <tr>
              <th scope="col" class="py-2 sm:py-3.5 pl-2 sm:pl-4 pr-2 sm:pr-3 text-left font-semibold text-gray-900 sm:pl-6">Cover</th>
              <th scope="col" class="px-2 sm:px-3 py-2 sm:py-3.5 text-left font-semibold text-gray-900 cursor-pointer" data-sort="title">
                Title
                <span class="sort-icon ml-1 sm:ml-2 text-gray-400">↕</span>
              </th>
              <th scope="col" class="px-2 sm:px-3 py-2 sm:py-3.5 text-left font-semibold text-gray-900 cursor-pointer" data-sort="author">
                Author
                <span class="sort-icon ml-1 sm:ml-2 text-gray-400">↕</span>
              </th>
              <th scope="col" class="px-2 sm:px-3 py-2 sm:py-3.5 text-left font-semibold text-gray-900 cursor-pointer" data-sort="class">
                Class
                <span class="sort-icon ml-1 sm:ml-2 text-gray-400">↕</span>
              </th>
              <th scope="col" class="px-2 sm:px-3 py-2 sm:py-3.5 text-left font-semibold text-gray-900 cursor-pointer" data-sort="dateCompleted">
                Status
                <span class="sort-icon ml-1 sm:ml-2 text-gray-400">↕</span>
              </th>
            </tr>
          </thead>
          <tbody class="divide-y divide-gray-200 bg-white" id="tableBody">
            {futureReads.map((book) => (
              <tr class="hover:bg-gray-50">
                <td class="py-2 sm:py-4 pl-2 sm:pl-4 pr-2 sm:pr-3">
                  {book.slug ? (
                    <a href={`/books/${book.slug}`} class="block">
                      <img src={book.coverImage} alt={`Cover of ${book.title}`} class="w-10 sm:w-12 h-auto rounded shadow-sm border border-gray-200" />
                    </a>
                  ) : (
                    <img src={book.coverImage} alt={`Cover of ${book.title}`} class="w-10 sm:w-12 h-auto rounded shadow-sm border border-gray-200" />
                  )}
                </td>
                <td class="whitespace-nowrap px-2 sm:px-3 py-2 sm:py-4 font-medium text-gray-900">
                  {book.slug ? (
                    <a href={`/books/${book.slug}`} class="text-blue-600 hover:underline">{book.title}</a>
                  ) : (
                    book.title
                  )}
                </td>
                <td class="whitespace-nowrap px-2 sm:px-3 py-2 sm:py-4 text-gray-500">{book.author.join(', ')}</td>
                <td class="whitespace-nowrap px-2 sm:px-3 py-2 sm:py-4 text-gray-500">{book.class}</td>
                <td class="whitespace-nowrap px-2 sm:px-3 py-2 sm:py-4 text-gray-500">{book.dateCompleted}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      <!-- Mobile Cards -->
      <div class="block md:hidden">
        {futureReads.map((book) => (
          <div class="bg-white rounded shadow p-4 mb-4 flex flex-col">
            <div class="flex items-center mb-2">
              {book.slug ? (
                <a href={`/books/${book.slug}`} class="block mr-4">
                  <img src={book.coverImage} alt={`Cover of ${book.title}`} class="w-16 h-auto rounded shadow-sm border border-gray-200" />
                </a>
              ) : (
                <img src={book.coverImage} alt={`Cover of ${book.title}`} class="w-16 h-auto rounded shadow-sm border border-gray-200 mr-4" />
              )}
              <div>
                {book.slug ? (
                  <a href={`/books/${book.slug}`} class="font-bold text-base text-blue-600 hover:underline">{book.title}</a>
                ) : (
                  <div class="font-bold text-base">{book.title}</div>
                )}
                <div class="text-gray-500 text-sm">{book.author.join(', ')}</div>
              </div>
            </div>
            <div class="text-sm text-gray-700">Class: {book.class}</div>
            <div class="text-sm text-gray-700">Status: {book.dateCompleted}</div>
          </div>
        ))}
      </div>
    </div>
  </div>
</Layout>

<script>
  // Get DOM elements
  const filterInput = document.getElementById('filterInput');
  const classFilter = document.getElementById('classFilter');
  const statusFilter = document.getElementById('statusFilter');
  const tableBody = document.getElementById('tableBody');
  const sortableHeaders = document.querySelectorAll('[data-sort]');
  
  // Current sort state
  let currentSort = {
    column: '',
    ascending: true
  };

  // Convert table rows to array of objects for easier manipulation
  function getTableData() {
    const rows = Array.from(tableBody.querySelectorAll('tr'));
    return rows.map(row => ({
      element: row,
      title: row.children[1].textContent,
      author: row.children[2].textContent,
      class: row.children[3].textContent,
      dateCompleted: row.children[4].textContent
    }));
  }

  // Sort table data
  function sortData(data, column) {
    return data.sort((a, b) => {
      const aVal = a[column].toLowerCase();
      const bVal = b[column].toLowerCase();
      
      if (currentSort.ascending) {
        return aVal.localeCompare(bVal);
      } else {
        return bVal.localeCompare(aVal);
      }
    });
  }

  // Filter table data
  function filterData(data, searchTerm, classValue, statusValue) {
    return data.filter(item => {
      const searchString = `${item.title} ${item.author} ${item.class} ${item.dateCompleted}`.toLowerCase();
      const matchesSearch = !searchTerm || searchString.includes(searchTerm.toLowerCase());
      const matchesClass = !classValue || item.class.trim().toLowerCase() === classValue.trim().toLowerCase();
      const matchesStatus = !statusValue || item.dateCompleted.trim().toLowerCase() === statusValue.trim().toLowerCase();
      // OR logic: show if any filter matches (or all are empty)
      return matchesSearch || matchesClass || matchesStatus;
    });
  }

  // Update table with sorted/filtered data
  function updateTable(data) {
    tableBody.innerHTML = '';
    data.forEach(item => {
      tableBody.appendChild(item.element);
    });
  }

  function applyFilters() {
    const data = getTableData();
    const filtered = filterData(data, filterInput.value, classFilter.value, statusFilter.value);
    updateTable(filtered);
  }

  // Add event listeners
  if (filterInput && tableBody && classFilter && statusFilter) {
    filterInput.addEventListener('input', applyFilters);
    classFilter.addEventListener('change', applyFilters);
    statusFilter.addEventListener('change', applyFilters);
  }

  // Add sorting functionality
  sortableHeaders.forEach(header => {
    const sortIcon = header.querySelector('.sort-icon');
    
    header.addEventListener('click', () => {
      const column = header.dataset.sort;
      
      // Remove active class from all icons
      document.querySelectorAll('.sort-icon').forEach(icon => {
        icon.classList.remove('text-blue-500');
        icon.classList.add('text-gray-400');
      });
      
      // Update sort state
      if (currentSort.column === column) {
        currentSort.ascending = !currentSort.ascending;
      } else {
        currentSort.column = column;
        currentSort.ascending = true;
      }
      
      // Add active class to current sort icon
      sortIcon.classList.remove('text-gray-400');
      sortIcon.classList.add('text-blue-500');
      
      // Sort and update table
      const data = getTableData();
      const sorted = sortData(data, column);
      updateTable(sorted);
    });
  });
</script>