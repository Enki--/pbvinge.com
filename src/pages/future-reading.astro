---
import Layout from '../layouts/Layout.astro';

// This will be replaced with real book data later
const futureReads = [
  {
    title: "Example Book 1",
    author: "Author Name",
    class: "Psychology",
    dateCompleted: "TBR",
    coverImage: "https://placehold.co/120x180"
  },
  {
    title: "Example Book 2",
    author: "Another Author",
    class: "Philosophy",
    dateCompleted: "TBR",
    coverImage: "https://placehold.co/120x180"
  }
];
---

<Layout title="Future Reading - Shrink">
  <div class="reading-container">
    <header class="page-header">
      <h1>Future Reading</h1>
      <p class="intro">
        Books I plan to read, organized by subject area.
      </p>
    </header>

    <div class="controls">
      <input 
        type="text" 
        id="filterInput" 
        placeholder="Filter books..."
        class="filter-input"
      />
    </div>

    <div class="table-wrapper">
      <table class="reading-table">
        <thead>
          <tr>
            <th class="cover-col">Cover</th>
            <th class="title-col sortable" data-sort="title">
              Title
              <span class="sort-icon">↕</span>
            </th>
            <th class="author-col sortable" data-sort="author">
              Author
              <span class="sort-icon">↕</span>
            </th>
            <th class="class-col sortable" data-sort="class">
              Class
              <span class="sort-icon">↕</span>
            </th>
            <th class="date-col sortable" data-sort="dateCompleted">
              Status
              <span class="sort-icon">↕</span>
            </th>
          </tr>
        </thead>
        <tbody id="tableBody">
          {futureReads.map((book) => (
            <tr>
              <td class="cover-col">
                <img src={book.coverImage} alt={`Cover of ${book.title}`} />
              </td>
              <td class="title-col">{book.title}</td>
              <td class="author-col">{book.author}</td>
              <td class="class-col">{book.class}</td>
              <td class="date-col">{book.dateCompleted}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  </div>
</Layout>

<style>
  .reading-container {
    width: 100%;
    max-width: 95%;
    margin: 0 auto;
    padding: 1rem;
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  .page-header {
    text-align: center;
    margin-bottom: 2rem;
    width: 100%;
  }

  h1 {
    font-size: 2.5rem;
    margin-bottom: 1rem;
  }

  .intro {
    font-size: 1.2rem;
    color: #555;
    max-width: 600px;
    margin: 0 auto;
  }

  .controls {
    width: 100%;
    display: flex;
    justify-content: center;
    margin-bottom: 1.5rem;
  }

  .filter-input {
    width: 100%;
    max-width: 300px;
    padding: 0.5rem 1rem;
    border: 2px solid #eee;
    border-radius: 6px;
    font-size: 0.95rem;
  }

  .filter-input:focus {
    outline: none;
    border-color: var(--link-color);
  }

  .table-wrapper {
    width: 100%;
    margin: 0 auto;
    background: white;
    border-radius: 8px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    overflow-x: auto;
  }

  .reading-table {
    width: 100%;
    table-layout: fixed;
    border-collapse: collapse;
    font-size: 0.95rem;
    margin: 0 auto;
  }

  thead {
    background: #f8f9fa;
    border-bottom: 2px solid #eee;
  }

  th {
    text-align: left;
    padding: 1rem;
    font-weight: 600;
    color: #444;
    white-space: nowrap;
  }

  .sortable {
    cursor: pointer;
    user-select: none;
  }

  .sortable:hover {
    background: #f1f3f5;
  }

  .sort-icon {
    display: inline-block;
    margin-left: 0.5rem;
    color: #999;
    font-size: 0.8em;
  }

  .sort-icon.active {
    color: var(--link-color);
  }

  td {
    padding: 1rem;
    border-bottom: 1px solid #eee;
    vertical-align: middle;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  tr:last-child td {
    border-bottom: none;
  }

  .cover-col {
    width: 7%;
    min-width: 60px;
    max-width: 80px;
  }

  .cover-col img {
    width: 100%;
    max-width: 60px;
    height: auto;
    aspect-ratio: 2/3;
    object-fit: cover;
    border-radius: 4px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .title-col {
    width: 30%;
    min-width: 140px;
    font-weight: 500;
  }

  .author-col {
    width: 25%;
    min-width: 120px;
    color: #555;
  }

  .class-col {
    width: 20%;
    min-width: 100px;
    color: #666;
  }

  .date-col {
    width: 18%;
    min-width: 90px;
    color: #666;
  }

  tr:hover {
    background: #f8f9fa;
  }

  @media (max-width: 768px) {
    .reading-container {
      max-width: 100%;
      padding: 0.5rem;
    }

    .reading-table {
      font-size: 0.9rem;
    }

    th, td {
      padding: 0.75rem 0.5rem;
    }

    .table-wrapper {
      border-radius: 0;
    }

    /* Show full text on hover for mobile */
    td:hover {
      white-space: normal;
      overflow: visible;
      position: relative;
      background-color: white;
      z-index: 1;
    }
  }

  .hidden {
    display: none;
  }
</style>

<script>
  // Get DOM elements
  const filterInput = document.getElementById('filterInput');
  const tableBody = document.getElementById('tableBody');
  const sortableHeaders = document.querySelectorAll('.sortable');
  
  // Current sort state
  let currentSort = {
    column: '',
    ascending: true
  };

  // Convert table rows to array of objects for easier manipulation
  function getTableData() {
    const rows = Array.from(tableBody.querySelectorAll('tr'));
    return rows.map(row => ({
      element: row,
      title: row.querySelector('.title-col').textContent,
      author: row.querySelector('.author-col').textContent,
      class: row.querySelector('.class-col').textContent,
      dateCompleted: row.querySelector('.date-col').textContent
    }));
  }

  // Sort table data
  function sortData(data, column) {
    return data.sort((a, b) => {
      const aVal = a[column].toLowerCase();
      const bVal = b[column].toLowerCase();
      
      if (currentSort.ascending) {
        return aVal.localeCompare(bVal);
      } else {
        return bVal.localeCompare(aVal);
      }
    });
  }

  // Update table with sorted/filtered data
  function updateTable(data) {
    tableBody.innerHTML = '';
    data.forEach(item => {
      tableBody.appendChild(item.element);
    });
  }

  // Filter table data
  function filterData(data, searchTerm) {
    return data.filter(item => {
      const searchString = `${item.title} ${item.author} ${item.class} ${item.dateCompleted}`.toLowerCase();
      return searchString.includes(searchTerm.toLowerCase());
    });
  }

  // Add event listeners
  if (filterInput && tableBody) {
    filterInput.addEventListener('input', () => {
      const data = getTableData();
      const filtered = filterData(data, filterInput.value);
      updateTable(filtered);
    });
  }

  // Add sorting functionality
  sortableHeaders.forEach(header => {
    const sortIcon = header.querySelector('.sort-icon');
    
    header.addEventListener('click', () => {
      const column = header.dataset.sort;
      
      // Remove active class from all icons
      document.querySelectorAll('.sort-icon').forEach(icon => {
        icon.classList.remove('active');
      });
      
      // Update sort state
      if (currentSort.column === column) {
        currentSort.ascending = !currentSort.ascending;
      } else {
        currentSort.column = column;
        currentSort.ascending = true;
      }
      
      // Add active class to current sort icon
      sortIcon.classList.add('active');
      
      // Sort and update table
      const data = getTableData();
      const sorted = sortData(data, column);
      updateTable(sorted);
    });
  });
</script>