---
import Layout from '../layouts/Layout.astro';
import { getFutureReads } from '../data/future-reads';

const futureReads = await getFutureReads();
---

<!-- DEBUG: Show futureReads length and first item -->
{futureReads && futureReads.length > 0 ? (
  <pre class="bg-yellow-100 text-xs p-2 mb-4 rounded border border-yellow-300">
    {`futureReads.length: ${futureReads.length}\nFirst item: ${JSON.stringify(futureReads[0], null, 2)}`}
  </pre>
) : (
  <pre class="bg-red-100 text-xs p-2 mb-4 rounded border border-red-300">
    No futureReads data loaded.
  </pre>
)}

<Layout title="Future Reading - Shrink">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <header class="text-center mb-8">
      <h1 class="text-4xl font-bold mb-4">Future Reading</h1>
      <p class="text-lg text-gray-600 max-w-2xl mx-auto">
        Books I plan to read, organized by subject area.
      </p>
    </header>

    <div class="mb-6">
      <input 
        type="text" 
        id="filterInput" 
        placeholder="Filter books..."
        class="w-full max-w-md mx-auto block px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
      />
    </div>

    <div class="overflow-hidden shadow ring-1 ring-black ring-opacity-5 rounded-lg">
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-300">
          <thead class="bg-gray-50">
            <tr>
              <th scope="col" class="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-6">Cover</th>
              <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900 cursor-pointer" data-sort="title">
                Title
                <span class="sort-icon ml-2 text-gray-400">↕</span>
              </th>
              <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900 cursor-pointer" data-sort="author">
                Author
                <span class="sort-icon ml-2 text-gray-400">↕</span>
              </th>
              <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900 cursor-pointer" data-sort="class">
                Class
                <span class="sort-icon ml-2 text-gray-400">↕</span>
              </th>
              <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900 cursor-pointer" data-sort="dateCompleted">
                Status
                <span class="sort-icon ml-2 text-gray-400">↕</span>
              </th>
            </tr>
          </thead>
          <tbody class="divide-y divide-gray-200 bg-white" id="tableBody">
            {futureReads.map((book) => (
              <tr class="hover:bg-gray-50">
                <td class="py-4 pl-4 pr-3 sm:pl-6">
                  <img src={book.coverImage} alt={`Cover of ${book.title}`} class="w-12 h-auto rounded shadow-sm border border-gray-200" />
                </td>
                <td class="whitespace-nowrap px-3 py-4 text-sm font-medium text-gray-900">{book.title}</td>
                <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">{book.author}</td>
                <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">{book.class}</td>
                <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">{book.dateCompleted}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  </div>
</Layout>

<script>
  // Get DOM elements
  const filterInput = document.getElementById('filterInput');
  const tableBody = document.getElementById('tableBody');
  const sortableHeaders = document.querySelectorAll('[data-sort]');
  
  // Current sort state
  let currentSort = {
    column: '',
    ascending: true
  };

  // Convert table rows to array of objects for easier manipulation
  function getTableData() {
    const rows = Array.from(tableBody.querySelectorAll('tr'));
    return rows.map(row => ({
      element: row,
      title: row.children[1].textContent,
      author: row.children[2].textContent,
      class: row.children[3].textContent,
      dateCompleted: row.children[4].textContent
    }));
  }

  // Sort table data
  function sortData(data, column) {
    return data.sort((a, b) => {
      const aVal = a[column].toLowerCase();
      const bVal = b[column].toLowerCase();
      
      if (currentSort.ascending) {
        return aVal.localeCompare(bVal);
      } else {
        return bVal.localeCompare(aVal);
      }
    });
  }

  // Update table with sorted/filtered data
  function updateTable(data) {
    tableBody.innerHTML = '';
    data.forEach(item => {
      tableBody.appendChild(item.element);
    });
  }

  // Filter table data
  function filterData(data, searchTerm) {
    return data.filter(item => {
      const searchString = `${item.title} ${item.author} ${item.class} ${item.dateCompleted}`.toLowerCase();
      return searchString.includes(searchTerm.toLowerCase());
    });
  }

  // Add event listeners
  if (filterInput && tableBody) {
    filterInput.addEventListener('input', () => {
      const data = getTableData();
      const filtered = filterData(data, filterInput.value);
      updateTable(filtered);
    });
  }

  // Add sorting functionality
  sortableHeaders.forEach(header => {
    const sortIcon = header.querySelector('.sort-icon');
    
    header.addEventListener('click', () => {
      const column = header.dataset.sort;
      
      // Remove active class from all icons
      document.querySelectorAll('.sort-icon').forEach(icon => {
        icon.classList.remove('text-blue-500');
        icon.classList.add('text-gray-400');
      });
      
      // Update sort state
      if (currentSort.column === column) {
        currentSort.ascending = !currentSort.ascending;
      } else {
        currentSort.column = column;
        currentSort.ascending = true;
      }
      
      // Add active class to current sort icon
      sortIcon.classList.remove('text-gray-400');
      sortIcon.classList.add('text-blue-500');
      
      // Sort and update table
      const data = getTableData();
      const sorted = sortData(data, column);
      updateTable(sorted);
    });
  });
</script>