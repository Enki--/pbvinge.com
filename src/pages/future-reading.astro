---
import Layout from '../layouts/Layout.astro';
import { getCollection } from 'astro:content';

// Get all books from the content collection
const allBooks = await getCollection('books', ({ data }) => {
  return data.isPublished;
});

// Class descriptions for better readability
const classDescriptions = {
  '600': 'Military Strategy & Theory',
  '601': 'International Relations & Decision Making',
  '627': 'Air Power & Aviation History',
  '690': 'Research Methods & Academic Skills'
};

// Convert to the format expected by the template
const futureReads = allBooks.map(book => ({
  title: book.data.title,
  author: book.data.author,
  class: book.data.class || '',
  classDescription: classDescriptions[book.data.class] || book.data.class,
  dateCompleted: book.data.status || 'TBR',
  coverImage: book.data.cover,
  tags: book.data.tags || [],
  slug: book.data.status === 'complete' ? book.slug : null
}));

// Group books by class for the grouped view
const groupedBooks = futureReads.reduce((acc, book) => {
  const key = book.class || 'Other';
  if (!acc[key]) {
    acc[key] = {
      class: key,
      description: classDescriptions[key] || key,
      books: []
    };
  }
  acc[key].books.push(book);
  return acc;
}, {});

// Sort classes by number
const sortedClasses = Object.keys(groupedBooks).sort();
---

<Layout title="Future Reading - Shrink">
  <div class="w-full flex justify-center">
    <div class="w-full px-2 sm:px-4 lg:px-8 py-8">
      <header class="text-center mb-8">
        <h1 class="text-4xl font-bold mb-4">Future Reading</h1>
        <p class="text-lg text-gray-600 max-w-2xl mx-auto">
          Books I plan to read, organized by subject area.
        </p>
      </header>

      <!-- View Toggle -->
      <div class="mb-6 flex justify-center">
        <div class="bg-gray-100 rounded-lg p-1 inline-flex">
          <button id="flatViewBtn" class="px-4 py-2 rounded-md bg-white shadow-sm text-sm font-medium text-gray-900">
            Flat View
          </button>
          <button id="groupedViewBtn" class="px-4 py-2 rounded-md text-sm font-medium text-gray-500 hover:text-gray-900">
            Grouped View
          </button>
        </div>
      </div>

      <!-- Search and Filters -->
      <div class="mb-6">
        <input 
          type="text" 
          id="filterInput" 
          placeholder="Search books by title, author, or class..."
          class="w-full max-w-md mx-auto block px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
        />
      </div>

      <div class="mb-4 flex flex-wrap gap-4 items-center justify-center">
        <label for="classFilter" class="font-medium">Filter by Class:</label>
        <select id="classFilter" class="border rounded px-2 py-1">
          <option value="">All Classes</option>
          {sortedClasses.map(cls => (
            <option value={cls}>{cls} - {classDescriptions[cls]}</option>
          ))}
        </select>
        <label for="statusFilter" class="font-medium ml-4">Filter by Status:</label>
        <select id="statusFilter" class="border rounded px-2 py-1">
          <option value="">All Status</option>
          {Array.from(new Set(futureReads.map(book => book.dateCompleted))).map(status => (
            <option value={status}>{status}</option>
          ))}
        </select>
      </div>

      <!-- Flat View (Original Table) -->
      <div id="flatView" class="hidden md:block w-full">
        <table class="w-full max-w-screen-lg mx-auto divide-y divide-gray-300 text-base">
          <thead class="bg-gray-50">
            <tr>
              <th scope="col" class="py-2 sm:py-3.5 pl-2 sm:pl-4 pr-2 sm:pr-3 text-left font-semibold text-gray-900 sm:pl-6">Cover</th>
              <th scope="col" class="px-2 sm:px-3 py-2 sm:py-3.5 text-left font-semibold text-gray-900 cursor-pointer" data-sort="title">
                Title
                <span class="sort-icon ml-1 sm:ml-2 text-gray-400">↕</span>
              </th>
              <th scope="col" class="px-2 sm:px-3 py-2 sm:py-3.5 text-left font-semibold text-gray-900 cursor-pointer" data-sort="author">
                Author
                <span class="sort-icon ml-1 sm:ml-2 text-gray-400">↕</span>
              </th>
              <th scope="col" class="px-2 sm:px-3 py-2 sm:py-3.5 text-left font-semibold text-gray-900 cursor-pointer" data-sort="class">
                Class
                <span class="sort-icon ml-1 sm:ml-2 text-gray-400">↕</span>
              </th>
              <th scope="col" class="px-2 sm:px-3 py-2 sm:py-3.5 text-left font-semibold text-gray-900 cursor-pointer" data-sort="dateCompleted">
                Status
                <span class="sort-icon ml-1 sm:ml-2 text-gray-400">↕</span>
              </th>
            </tr>
          </thead>
          <tbody class="divide-y divide-gray-200 bg-white" id="tableBody">
            {futureReads.map((book) => (
              <tr class="hover:bg-gray-50">
                <td class="py-2 sm:py-4 pl-2 sm:pl-4 pr-2 sm:pr-3">
                  {book.slug ? (
                    <a href={`/books/${book.slug}`} class="block">
                      <img src={book.coverImage} alt={`Cover of ${book.title}`} class="w-10 sm:w-12 h-auto rounded shadow-sm border border-gray-200" />
                    </a>
                  ) : (
                    <img src={book.coverImage} alt={`Cover of ${book.title}`} class="w-10 sm:w-12 h-auto rounded shadow-sm border border-gray-200" />
                  )}
                </td>
                <td class="whitespace-nowrap px-2 sm:px-3 py-2 sm:py-4 font-medium text-gray-900">
                  {book.slug ? (
                    <a href={`/books/${book.slug}`} class="text-blue-600 hover:underline">{book.title}</a>
                  ) : (
                    book.title
                  )}
                </td>
                <td class="whitespace-nowrap px-2 sm:px-3 py-2 sm:py-4 text-gray-500">{book.author.join(', ')}</td>
                <td class="whitespace-nowrap px-2 sm:px-3 py-2 sm:py-4 text-gray-500">
                  <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                    {book.class} - {book.classDescription}
                  </span>
                </td>
                <td class="whitespace-nowrap px-2 sm:px-3 py-2 sm:py-4 text-gray-500">{book.dateCompleted}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      <!-- Grouped View -->
      <div id="groupedView" class="hidden w-full max-w-screen-lg mx-auto">
        {sortedClasses.map(cls => {
          const group = groupedBooks[cls];
          return (
            <div class="mb-8 bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
              <div class="bg-gradient-to-r from-blue-50 to-indigo-50 px-6 py-4 border-b border-gray-200">
                <h2 class="text-xl font-semibold text-gray-900">{group.class} - {group.description}</h2>
                <p class="text-sm text-gray-600 mt-1">{group.books.length} book{group.books.length !== 1 ? 's' : ''}</p>
              </div>
              <div class="divide-y divide-gray-200">
                {group.books.map((book) => (
                  <div class="p-4 hover:bg-gray-50">
                    <div class="flex items-center space-x-4">
                      <div class="flex-shrink-0">
                        {book.slug ? (
                          <a href={`/books/${book.slug}`} class="block">
                            <img src={book.coverImage} alt={`Cover of ${book.title}`} class="w-16 h-auto rounded shadow-sm border border-gray-200" />
                          </a>
                        ) : (
                          <img src={book.coverImage} alt={`Cover of ${book.title}`} class="w-16 h-auto rounded shadow-sm border border-gray-200" />
                        )}
                      </div>
                      <div class="flex-1 min-w-0">
                        <div class="flex items-center justify-between">
                          <div>
                            {book.slug ? (
                              <a href={`/books/${book.slug}`} class="text-lg font-medium text-blue-600 hover:underline">{book.title}</a>
                            ) : (
                              <div class="text-lg font-medium text-gray-900">{book.title}</div>
                            )}
                            <p class="text-sm text-gray-500">{book.author.join(', ')}</p>
                          </div>
                          <div class="flex items-center space-x-2">
                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                              {book.dateCompleted}
                            </span>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          );
        })}
      </div>

      <!-- Mobile Cards (Flat View) -->
      <div id="mobileFlatView" class="block md:hidden">
        {futureReads.map((book) => (
          <div class="bg-white rounded shadow p-4 mb-4 flex flex-col">
            <div class="flex items-center mb-2">
              {book.slug ? (
                <a href={`/books/${book.slug}`} class="block mr-4">
                  <img src={book.coverImage} alt={`Cover of ${book.title}`} class="w-16 h-auto rounded shadow-sm border border-gray-200" />
                </a>
              ) : (
                <img src={book.coverImage} alt={`Cover of ${book.title}`} class="w-16 h-auto rounded shadow-sm border border-gray-200 mr-4" />
              )}
              <div>
                {book.slug ? (
                  <a href={`/books/${book.slug}`} class="font-bold text-base text-blue-600 hover:underline">{book.title}</a>
                ) : (
                  <div class="font-bold text-base">{book.title}</div>
                )}
                <div class="text-gray-500 text-sm">{book.author.join(', ')}</div>
              </div>
            </div>
            <div class="text-sm text-gray-700 mb-1">
              <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                {book.class} - {book.classDescription}
              </span>
            </div>
            <div class="text-sm text-gray-700">Status: {book.dateCompleted}</div>
          </div>
        ))}
      </div>

      <!-- Mobile Cards (Grouped View) -->
      <div id="mobileGroupedView" class="hidden block md:hidden">
        {sortedClasses.map(cls => {
          const group = groupedBooks[cls];
          return (
            <div class="mb-6">
              <div class="bg-gradient-to-r from-blue-50 to-indigo-50 px-4 py-3 rounded-t-lg">
                <h3 class="font-semibold text-gray-900">{group.class} - {group.description}</h3>
                <p class="text-sm text-gray-600">{group.books.length} book{group.books.length !== 1 ? 's' : ''}</p>
              </div>
              {group.books.map((book) => (
                <div class="bg-white border border-gray-200 border-t-0 p-4 last:rounded-b-lg">
                  <div class="flex items-center space-x-3">
                    {book.slug ? (
                      <a href={`/books/${book.slug}`} class="block">
                        <img src={book.coverImage} alt={`Cover of ${book.title}`} class="w-12 h-auto rounded shadow-sm border border-gray-200" />
                      </a>
                    ) : (
                      <img src={book.coverImage} alt={`Cover of ${book.title}`} class="w-12 h-auto rounded shadow-sm border border-gray-200" />
                    )}
                    <div class="flex-1 min-w-0">
                      {book.slug ? (
                        <a href={`/books/${book.slug}`} class="font-medium text-blue-600 hover:underline">{book.title}</a>
                      ) : (
                        <div class="font-medium">{book.title}</div>
                      )}
                      <div class="text-sm text-gray-500">{book.author.join(', ')}</div>
                      <div class="text-xs text-gray-400 mt-1">{book.dateCompleted}</div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          );
        })}
      </div>
    </div>
  </div>
</Layout>

<script>
  // Get DOM elements
  const filterInput = document.getElementById('filterInput');
  const classFilter = document.getElementById('classFilter');
  const statusFilter = document.getElementById('statusFilter');
  const tableBody = document.getElementById('tableBody');
  const sortableHeaders = document.querySelectorAll('[data-sort]');
  const flatViewBtn = document.getElementById('flatViewBtn');
  const groupedViewBtn = document.getElementById('groupedViewBtn');
  const flatView = document.getElementById('flatView');
  const groupedView = document.getElementById('groupedView');
  const mobileFlatView = document.getElementById('mobileFlatView');
  const mobileGroupedView = document.getElementById('mobileGroupedView');
  
  // Current sort state
  let currentSort = {
    column: '',
    ascending: true
  };

  // View state
  let currentView = 'flat';

  // Toggle view function
  function toggleView(view) {
    currentView = view;
    
    if (view === 'flat') {
      flatViewBtn.classList.add('bg-white', 'shadow-sm', 'text-gray-900');
      flatViewBtn.classList.remove('text-gray-500');
      groupedViewBtn.classList.remove('bg-white', 'shadow-sm', 'text-gray-900');
      groupedViewBtn.classList.add('text-gray-500');
      
      flatView.classList.remove('hidden');
      groupedView.classList.add('hidden');
      mobileFlatView.classList.remove('hidden');
      mobileGroupedView.classList.add('hidden');
    } else {
      groupedViewBtn.classList.add('bg-white', 'shadow-sm', 'text-gray-900');
      groupedViewBtn.classList.remove('text-gray-500');
      flatViewBtn.classList.remove('bg-white', 'shadow-sm', 'text-gray-900');
      flatViewBtn.classList.add('text-gray-500');
      
      groupedView.classList.remove('hidden');
      flatView.classList.add('hidden');
      mobileGroupedView.classList.remove('hidden');
      mobileFlatView.classList.add('hidden');
    }
  }

  // Convert table rows to array of objects for easier manipulation
  function getTableData() {
    const rows = Array.from(tableBody.querySelectorAll('tr'));
    return rows.map(row => ({
      element: row,
      title: row.children[1].textContent,
      author: row.children[2].textContent,
      class: row.children[3].textContent,
      dateCompleted: row.children[4].textContent
    }));
  }

  // Sort table data
  function sortData(data, column) {
    return data.sort((a, b) => {
      const aVal = a[column].toLowerCase();
      const bVal = b[column].toLowerCase();
      
      if (currentSort.ascending) {
        return aVal.localeCompare(bVal);
      } else {
        return bVal.localeCompare(aVal);
      }
    });
  }

  // Filter table data
  function filterData(data, searchTerm, classValue, statusValue) {
    return data.filter(item => {
      const searchString = `${item.title} ${item.author} ${item.class} ${item.dateCompleted}`.toLowerCase();
      const matchesSearch = !searchTerm || searchString.includes(searchTerm.toLowerCase());
      const matchesClass = !classValue || item.class.includes(classValue);
      const matchesStatus = !statusValue || item.dateCompleted.trim().toLowerCase() === statusValue.trim().toLowerCase();
      // AND logic: show only if all filters match
      return matchesSearch && matchesClass && matchesStatus;
    });
  }

  // Update table with sorted/filtered data
  function updateTable(data) {
    tableBody.innerHTML = '';
    data.forEach(item => {
      tableBody.appendChild(item.element);
    });
  }

  function applyFilters() {
    if (currentView === 'flat' && tableBody) {
      const data = getTableData();
      const filtered = filterData(data, filterInput.value, classFilter.value, statusFilter.value);
      updateTable(filtered);
    }
  }

  // Add event listeners
  if (filterInput && tableBody && classFilter && statusFilter) {
    filterInput.addEventListener('input', applyFilters);
    classFilter.addEventListener('change', applyFilters);
    statusFilter.addEventListener('change', applyFilters);
  }

  // Add view toggle listeners
  if (flatViewBtn && groupedViewBtn) {
    flatViewBtn.addEventListener('click', () => toggleView('flat'));
    groupedViewBtn.addEventListener('click', () => toggleView('grouped'));
  }

  // Add sorting functionality
  sortableHeaders.forEach(header => {
    const sortIcon = header.querySelector('.sort-icon');
    
    header.addEventListener('click', () => {
      const column = header.dataset.sort;
      
      // Remove active class from all icons
      document.querySelectorAll('.sort-icon').forEach(icon => {
        icon.classList.remove('text-blue-500');
        icon.classList.add('text-gray-400');
      });
      
      // Update sort state
      if (currentSort.column === column) {
        currentSort.ascending = !currentSort.ascending;
      } else {
        currentSort.column = column;
        currentSort.ascending = true;
      }
      
      // Add active class to current sort icon
      sortIcon.classList.remove('text-gray-400');
      sortIcon.classList.add('text-blue-500');
      
      // Sort and update table
      const data = getTableData();
      const sorted = sortData(data, column);
      updateTable(sorted);
    });
  });
</script>