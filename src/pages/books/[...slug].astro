---
import Layout from '../../layouts/Layout.astro';
import { getCollection } from 'astro:content';
import { getCitation } from '../../utils/citations';

// Generate static paths for completed books only
export async function getStaticPaths() {
  const books = await getCollection('books', ({ data }) => {
    return data.status === 'complete';
  });
  return books.map(book => ({
    params: { slug: book.slug },
    props: { book },
  }));
}

const { book } = Astro.props;
const { Content } = await book.render();

function formatDate(dateStr: string) {
  return new Date(dateStr).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
}

function getStatusColor(status: string | undefined) {
  switch(status?.toLowerCase()) {
    case 'complete': return 'bg-green-100 text-green-800';
    case 'reading': return 'bg-blue-100 text-blue-800';
    case 'to read': return 'bg-gray-100 text-gray-800';
    default: return 'bg-gray-100 text-gray-800';
  }
}

// Pre-generate citations
const citations = {
  bibtex: getCitation(book.data, 'bibtex'),
  apa: getCitation(book.data, 'apa'),
  mla: getCitation(book.data, 'mla')
};
---

<Layout title={`${book.data.title} - Book Notes`}>
  <article class="book-detail">
    <header class="book-header">
      <h1>{book.data.title}</h1>
      {book.data.subtitle && <p class="subtitle">{book.data.subtitle}</p>}
      
      <p class="author">by {book.data.author.join(', ')}</p>
      
      <div class="book-cover mb-6">
        {book.data.cover && (
          <img 
            src={book.data.cover} 
            alt={`Cover of ${book.data.title}`} 
            class="mx-auto max-w-[200px] rounded-lg shadow-sm border border-gray-200"
          />
        )}
      </div>
      
      <div class="book-meta">
        <div class="metadata-row">
          <span class={`status-badge ${getStatusColor(book.data.status)}`}>
            {book.data.status || 'To Read'}
          </span>
          
          {book.data.pages && (
            <span class="pages">{book.data.pages} pages</span>
          )}

          {book.data.category && (
            <div class="categories">
              {book.data.category.map((cat) => (
                <span class="category">{cat}</span>
              ))}
            </div>
          )}
          
          <div class="tags">
            {book.data.tags.filter(tag => tag !== 'ðŸ“šBook').map((tag) => (
              <span class="tag">{tag}</span>
            ))}
          </div>

          {book.data.created && (
            <span class="date">Added: {formatDate(book.data.created)}</span>
          )}
          {book.data.updated && book.data.updated !== book.data.created && (
            <span class="date">Updated: {formatDate(book.data.updated)}</span>
          )}
        </div>
      </div>
    </header>

    <div class="book-content prose prose-lg max-w-none">
      <Content />
    </div>

    <footer class="book-footer">
      <div class="book-metadata">
        <h2>Book Details</h2>
        <dl>
          {book.data.publisher && (
            <>
              <dt>Publisher</dt>
              <dd>{book.data.publisher}</dd>
            </>
          )}
          {book.data.publish && (
            <>
              <dt>Published</dt>
              <dd>{formatDate(book.data.publish)}</dd>
            </>
          )}
          {book.data.isbn13 && (
            <>
              <dt>ISBN-13</dt>
              <dd>{book.data.isbn13}</dd>
            </>
          )}
          {book.data.isbn10 && (
            <>
              <dt>ISBN-10</dt>
              <dd>{book.data.isbn10}</dd>
            </>
          )}
        </dl>
        
        <div class="citation-export mt-6">
          <div class="flex items-center gap-4">
            <select id="citationFormat" class="px-3 py-2 border rounded-lg text-sm">
              <option value="bibtex">BibTeX</option>
              <option value="apa">APA</option>
              <option value="mla">MLA</option>
            </select>
            <button id="copyCitation" class="px-4 py-2 bg-blue-500 text-white rounded-lg text-sm hover:bg-blue-600 transition-colors">
              Copy Citation
            </button>
          </div>
          <pre id="citationPreview" class="mt-4 p-4 bg-gray-100 rounded-lg text-sm overflow-x-auto"></pre>
        </div>
      </div>
    </footer>
  </article>
</Layout>

<style>
  .book-detail {
    max-width: 800px;
    margin: 0 auto;
    padding: 2rem 1rem;
  }

  .book-header {
    margin-bottom: 3rem;
    text-align: center;
  }

  .book-header h1 {
    font-size: 2.5rem;
    margin: 0;
    line-height: 1.2;
  }

  .subtitle {
    font-size: 1.4rem;
    color: #666;
    margin: 0.25rem 0 1rem;
  }

  .author {
    font-size: 1.4rem;
    color: #666;
    margin: 1rem 0;
  }

  .book-meta {
    margin-top: 1rem;
  }

  .metadata-row {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    justify-content: center;
    align-items: center;
  }

  .status-badge {
    display: inline-block;
    padding: 0.35rem 0.85rem;
    border-radius: 9999px;
    font-size: 0.875rem;
    font-weight: 500;
  }

  .pages {
    color: #666;
    font-size: 0.9rem;
  }

  .categories {
    display: flex;
    gap: 0.5rem;
  }

  .category {
    font-size: 0.9rem;
    color: #666;
    background: #f5f5f5;
    padding: 0.3rem 0.8rem;
    border-radius: 4px;
  }

  .tags {
    display: flex;
    gap: 0.5rem;
  }

  .tag {
    background: #f0f0f0;
    padding: 0.3rem 0.8rem;
    border-radius: 20px;
    font-size: 0.9rem;
    color: #666;
  }

  .date {
    font-size: 0.9rem;
    color: #666;
  }

  .book-metadata {
    background: #f8f9fa;
    border-radius: 8px;
    padding: 1.5rem;
    margin: 2rem 0;
  }

  .book-metadata h2 {
    font-size: 1.4rem;
    margin: 0 0 1rem 0;
    color: #333;
  }

  dl {
    display: grid;
    grid-template-columns: max-content 1fr;
    gap: 0.5rem 1.5rem;
  }

  dt {
    font-weight: 600;
    color: #555;
  }

  dd {
    margin: 0;
  }

  .book-content {
    font-size: 1.1rem;
    line-height: 1.8;
    color: #333;
  }

  .book-content :global(img) {
    margin: 2rem auto;
    border-radius: 4px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }

  .book-content :global(h2) {
    font-size: 1.8rem;
    margin: 2rem 0 1rem;
    color: #222;
  }

  .book-content :global(h3) {
    font-size: 1.4rem;
    margin: 1.5rem 0 1rem;
    color: #333;
  }

  .book-content :global(p) {
    margin-bottom: 1.5rem;
  }

  .book-content :global(ul),
  .book-content :global(ol) {
    margin: 1rem 0;
    padding-left: 1.5rem;
  }

  .book-content :global(li) {
    margin-bottom: 0.5rem;
  }

  .book-content :global(blockquote) {
    margin: 2rem 0;
    padding: 1rem 2rem;
    border-left: 4px solid #ddd;
    background: #f9f9f9;
    font-style: italic;
  }

  .book-footer {
    margin-top: 4rem;
    padding-top: 2rem;
    border-top: 1px solid #eee;
  }

  @media (max-width: 768px) {
    .book-header h1 {
      font-size: 2rem;
    }

    .metadata-row {
      flex-direction: column;
      gap: 0.75rem;
    }

    .categories,
    .tags {
      justify-content: center;
    }
  }
</style>

<script define:vars={{ citations }}>
// Citation export functionality
const formatSelect = document.getElementById('citationFormat');
const copyButton = document.getElementById('copyCitation');
const previewElement = document.getElementById('citationPreview');

function updateCitationPreview() {
  if (!formatSelect || !previewElement) return;
  const format = formatSelect.value;
  previewElement.textContent = citations[format];
}

formatSelect?.addEventListener('change', updateCitationPreview);

copyButton?.addEventListener('click', async () => {
  if (!previewElement?.textContent) return;
  
  try {
    await navigator.clipboard.writeText(previewElement.textContent);
    const originalText = copyButton.textContent;
    copyButton.textContent = 'Copied!';
    copyButton.classList.add('bg-green-500');
    copyButton.classList.remove('bg-blue-500');
    
    setTimeout(() => {
      copyButton.textContent = originalText;
      copyButton.classList.remove('bg-green-500');
      copyButton.classList.add('bg-blue-500');
    }, 2000);
  } catch (err) {
    console.error('Failed to copy:', err);
    alert('Failed to copy to clipboard');
  }
});

// Initialize preview
updateCitationPreview();
</script>